// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  role          UserRole  @default(USER)
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  twoFactorConfirmation   TwoFactorConfirmation?
  isTwoFactorEnabled        Boolean @default(false)  
 
  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id         String   @id @default(cuid())
  email      String
  token      String   @unique
  expires    DateTime
 
  @@unique([id, token])
  @@map("verification_tokens")
}

model ForgotPasswordToken {
  id         String   @id @default(cuid())
  email      String
  token      String   @unique
  expires    DateTime
 
  @@unique([id, token])
  @@map("forgot_password_tokens")
}

model TwoFactorToken {
  id         String   @id @default(cuid())
  email      String
  token      String   @unique
  expires    DateTime
 
  @@unique([id, token])
  @@map("two_factor_tokens")
}

model TwoFactorConfirmation {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId    String    @unique

  @@map("two_factor_confirmations")
}